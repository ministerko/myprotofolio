# -*- coding: utf-8 -*-
"""Photo-Cartoon

Automatically generated by Colaboratory.

"""

import time
import numpy as np
from collections import defaultdict
from scipy import stats
import cv2
import os

def cartoonize_image(image, alpha):
    """
    Convert your DP into Cartoon form
    """
    output = np.array(image)
    x, y, c = output.shape
    for i in range(c):
        output[:, :, i] = cv2.bilateralFilter(output[:, :, i], 5, 50, 50)
    edge = cv2.Canny(output, 100, 200)

    output = cv2.cvtColor(output, cv2.COLOR_RGB2HSV)

    hists = []
    hist, _ = np.histogram(output[:, :, 0], bins=np.arange(180+1))
    hists.append(hist)
    hist, _ = np.histogram(output[:, :, 1], bins=np.arange(256+1))
    hists.append(hist)
    hist, _ = np.histogram(output[:, :, 2], bins=np.arange(256+1))
    hists.append(hist)

    C = []
    for h in hists:
        C.append(centroids(h, alpha))
    #print("Centroids: {0}".format(C))

    output = output.reshape((-1, c))
    for i in range(c):
        channel = output[:, i]
        index = np.argmin(np.abs(channel[:, np.newaxis] - C[i]), axis=1)
        output[:, i] = C[i][index]
    output = output.reshape((x, y, c))
    output = cv2.cvtColor(output, cv2.COLOR_HSV2RGB)

    contours, _ = cv2.findContours(edge,
                                   cv2.RETR_EXTERNAL,
                                   cv2.CHAIN_APPROX_NONE)
    cv2.drawContours(output, contours, -1, 0, thickness=1)
    return output


def update_C_values(C, hist):
    while True:
        groups = defaultdict(list)
        for i in range(len(hist)):
            if hist[i] == 0:
                continue
            d = np.abs(C-i)
            index = np.argmin(d)
            groups[index].append(i)

        new_C = np.array(C)
        for i, indice in groups.items():
            if np.sum(hist[indice]) == 0:
                continue
            new_C[i] = int(np.sum(indice*hist[indice])/np.sum(hist[indice]))
        if np.sum(new_C-C) == 0:
            break
        C = new_C
    return C, groups


def centroids(hist, alpha):
    #alpha = 0.001
    N = 80
    C = np.array([128])

    while True:
        C, groups = update_C_values(C, hist)
        new_C = set()
        for i, indice in groups.items():
            if len(indice) < N:
                new_C.add(C[i])
                continue
            z, pval = stats.normaltest(hist[indice])
            if pval < alpha:
                left = 0 if i == 0 else C[i-1]
                right = len(hist)-1 if i == len(C)-1 else C[i+1]
                delta = right-left
                if delta >= 3:
                    c1 = (C[i]+left)/2
                    c2 = (C[i]+right)/2
                    new_C.add(c1)
                    new_C.add(c2)
                else:
                    new_C.add(C[i])
            else:
                new_C.add(C[i])
        if len(new_C) == len(C):
            break
        else:
            C = np.array(sorted(new_C))
    return C

def cartoonize_it(in_dir, alpha = 0.001):
    for f in os.listdir(in_dir):
        image = cv2.imread(os.path.join(in_dir, f))
        print('==============')
        print(f)
        start_time = time.time()
        output = cartoonize_image(image, alpha)
        end_time = time.time()
        print("Time: {0}s".format(end_time-start_time))
        name = os.path.basename(f)
        tmp = os.path.splitext(name)
        name = tmp[0]+"_cartoon" + tmp[1]
        name = os.path.join(in_dir, name)
        print("Write to {0}".format(name))
        cv2.imwrite(name, output)